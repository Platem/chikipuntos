{"version":3,"sources":["components/Navigation/index.js","constants/routes.js","components/Landing/index.js","components/SignUp/index.js","components/SignIn/index.js","components/PasswordForget/index.js","components/Home/index.js","components/Account/index.js","components/Admin/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","className","href","id","Link","to","LandingPage","SignUpPage","SignInPage","PasswordForgetPage","HomePage","AccountPage","AdminPage","App","BrowserRouter","components_Navigation","Route","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQA8BeA,EAzBI,kBACjBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,cAAtB,eACAH,EAAAC,EAAAC,cAAA,MAAIG,GAAG,aAAaF,UAAU,8BAC5BH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GCTO,KDSb,YAEFP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GCXI,SDWV,SAEFP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GCbO,YDab,YAEFP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GCfK,UDeX,UAEFP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GCtBO,WDsBb,gBEfKC,EANK,kBAClBR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBCIWO,EANI,kBACjBT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBCIWQ,EANI,kBACjBV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBCIWS,EANY,kBACzBX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BCIWU,EANE,kBACfZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBCIWW,EANK,kBAClBb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBCIWY,EANG,kBAChBd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBC6BWa,mLAjBX,OACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KRlBA,IQkBsBC,UAAWb,IAC9CR,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KRrBA,UQqBsBC,UAAWZ,IAC9CT,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KRrBA,UQqBsBC,UAAWX,IAC9CV,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KRjBQ,aQiBsBC,UAAWV,IACtDX,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KRrBH,QQqBsBC,UAAWT,IAC3CZ,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KRrBA,WQqBsBC,UAAWR,IAC9Cb,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KRrBF,SQqBsBC,UAAWP,aAZpCQ,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e87691ca.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport * as ROUTES from '../../constants/routes';\n\nconst Navigation = () => (\n  <nav>\n    <div className=\"nav-wrapper\">\n      <a href=\"#\" className=\"brand-logo\">Chikipuntos</a>\n      <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n        <li>\n          <Link to={ROUTES.LANDING}>Landing</Link>\n        </li>\n        <li>\n          <Link to={ROUTES.HOME}>Home</Link>\n        </li>\n        <li>\n          <Link to={ROUTES.ACCOUNT}>Account</Link>\n        </li>\n        <li>\n          <Link to={ROUTES.ADMIN}>Admin</Link>\n        </li>\n        <li>\n          <Link to={ROUTES.SIGN_IN}>Sign In</Link>\n        </li>\n      </ul>\n    </div>\n  </nav>\n);\n\nexport default Navigation;\n","export const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const LANDING = '/';\nexport const HOME = '/home';\nexport const ACCOUNT = '/account';\nexport const ADMIN = '/admin';\nexport const PASSWORD_FORGET = '/pw-forget';\n","import React from 'react';\n\nconst LandingPage = () => (\n  <div>\n    <h1>Landing</h1>\n  </div>\n);\n\nexport default LandingPage;\n","import React from 'react';\n\nconst SignUpPage = () => (\n  <div>\n    <h1>Sign Up</h1>\n  </div>\n);\n\nexport default SignUpPage;\n","import React from 'react';\n\nconst SignInPage = () => (\n  <div>\n    <h1>Sign In</h1>\n  </div>\n);\n\nexport default SignInPage;\n","import React from 'react';\n\nconst PasswordForgetPage = () => (\n  <div>\n    <h1>Password Forget</h1>\n  </div>\n);\n\nexport default PasswordForgetPage;\n","import React from 'react';\n\nconst HomePage = () => (\n  <div>\n    <h1>Home</h1>\n  </div>\n);\n\nexport default HomePage;\n","import React from 'react';\n\nconst AccountPage = () => (\n  <div>\n    <h1>Account</h1>\n  </div>\n);\n\nexport default AccountPage;\n","import React from 'react';\n\nconst AdminPage = () => (\n  <div>\n    <h1>Admin</h1>\n  </div>\n);\n\nexport default AdminPage;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Navigation from '../Navigation';\nimport LandingPage from '../Landing';\nimport SignUpPage from '../SignUp';\nimport SignInPage from '../SignIn';\nimport PasswordForgetPage from '../PasswordForget';\nimport HomePage from '../Home';\nimport AccountPage from '../Account';\nimport AdminPage from '../Admin';\n\nimport * as ROUTES from '../../constants/routes';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Navigation />\n          <Route exact path={ROUTES.LANDING} component={LandingPage} />\n          <Route exact path={ROUTES.SIGN_UP} component={SignUpPage} />\n          <Route exact path={ROUTES.SIGN_IN} component={SignInPage} />\n          <Route exact path={ROUTES.PASSWORD_FORGET} component={PasswordForgetPage} />\n          <Route exact path={ROUTES.HOME} component={HomePage} />\n          <Route exact path={ROUTES.ACCOUNT} component={AccountPage} />\n          <Route exact path={ROUTES.ADMIN} component={AdminPage} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}